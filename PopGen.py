#!/usr/bin/python3

'''

###                      ************ Bioinformatics: BINP29 ************
###                           *** Population Genetics Project ***
###
### Date: 2023-03-06
### Author(s): Joel Moreira
###
### Description:
###
###
### List of modules:
###     sys - > This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.
###     re - > This module provides regular expression matching operations.
###     Path - >This module provides a way of working with directories and file paths.
###
### Instructions:
###	The input must be 2 PLINK .ped files (It can be generated by using plink --recode in the bfile set)
###
### Usage:
### python3 PopGen.py user_individual_file.ped multi_individual_file.ped outputfile.txt
###
### PopGen.py being this code
### user_individual_file.ped PLINK ped file with just the information of 1 individual
### multi_individual_file.ped PLINK ped file with the information of multiple individuals
### matches_output.txt being the output file
'''
###
import sys
import re
from pathlib import Path


if len(sys.argv) == 4 and Path(sys.argv[1]).is_file() and Path(sys.argv[2]).is_file():
    ped_file = sys.argv[1]
    multi= sys.argv[2]
    outfile = sys.argv[3]
# if no filenames are provided, raise an error message just in case
elif len(sys.argv) == 1:
    raise Exception("\n\n>>>>> No input filesfound!\n")
# if neither parameters file nor output filename is provided:
elif len(sys.argv) == 3 and Path(sys.argv[1]).is_file() and Path(sys.argv[2]).is_file():
    outfile = "matches_output.txt"
    ped_file = sys.argv[1]
    multi= sys.argv[2]
# to cover possible errors not covered above
else:
    raise Exception("\n\n>>>>> Error! Please check if follows: python3 PopGen.py user_individual_file.ped multi_individual_file.ped outputfile.txt ###")


print("\n\n>>>>> Welcome to Joel Moreira's Population Genetics project\n\n Here you just input a PLINK .ped file with information from one individual that will be compared to a similar file with multiple individuals")

def read_ped_file(ped_file):
    """
    Reads in a .ped file and returns a dictionary of genotype data for each individual.
    """
    genotypes = {}
    for line in ped_file:
        cols = line.strip('\t').split()
        user_id = cols[0]+cols[1]
        genotype = cols[6:]
        genotypes[user_id] = genotype
    return genotypes

def count_homo_hetero(individual):
    """
    Lists the number of homozygous and heterozygous in the individual
    """
    tup_l=[]
    for i in range(0,len(individual),2):
        tup_l.append(tuple((individual[i],individual[i+1])))
    return tup_l

def mult_homo_hetero(individual,multiple_indiv):
    """
    Lists the number of homozygous and heterozygous in all individuals
    """
    dic_tup={}
    for ind_id, genotype in multiple_indiv.items():
        tup_mul=[]
        for i in range(0,len(genotype),2):
            tup_mul.append(tuple((genotype[i],genotype[i+1])))
        dic_tup[ind_id] = (tup_mul)
    return dic_tup



def count_matches(tuple_indiv,tuple_multi):
    """
    Counts the number of homozygous and heterozygous matches between the given individual
    and all individuals in the multiple_indiv dictionary.
    """
    matches = {}
    for ind_id, genotype in tuple_multi.items():
        homozygous = 0
        heterozygous = 0
        for i in range(len(tuple_indiv)):
            if genotype[i]==tuple_indiv[i]:
                if genotype[i][0] == genotype[i][1]:
                    homozygous += 1
                else:
                    heterozygous +=1
        matches[ind_id] = (homozygous, heterozygous)
    return matches


    # read in the individual's .ped file
with open( ped_file, 'r') as individual_ped:
    individual_run=read_ped_file(individual_ped)
    for user_id, genotype in individual_run.items():
        individual = genotype

print("\n\n>>>>> First file processed!")
# read in the multiple individual .ped file
with open( multi, 'r') as multiple_indiv_file:
    multiple_indiv = read_ped_file(multiple_indiv_file)


# count the number of homozygous and heterozygous matches
tuple_indiv=count_homo_hetero(individual)

print("\n\n>>>>> Second file processed! \n\n\n>>>>> Counting the Matches ...")
#list the homozygous and heterozygous matches in all
tuple_multi=mult_homo_hetero(individual,multiple_indiv)


#Count the number of matches between the user's individual and the multiple file
matches = count_matches(tuple_indiv,tuple_multi)

#report the results
with open(outfile, "w") as out:
    print("Ind_id\tHomozygous\tHeterozygous",file=out)
    for ind_id, match_counts in matches.items():
        print(f"{ind_id}\t{match_counts[0]}\t{match_counts[1]}", file=out)

print("\n\n>>>>> All done! -> Writing your output as:",outfile)
